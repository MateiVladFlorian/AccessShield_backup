/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.accessshield_backup;
import ApplicationManager.ManagerBuildings.BookingViewModel;
import core.AccountSession;
import Entities.*;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.accessshield_backup.Building_Management;
import jpa.*;

/**
 *
 * @author vlad
 */
public class MyReservations extends javax.swing.JFrame {
    /**
     * Creates new form MyReservations
     */
    
    public int state = 0;
    
    public MyReservations() {
        initComponents();
        setLocationRelativeTo(null);
        fillReservationList();
    }
    
    public void fillReservationList() {
        new Thread(() -> {
            BookingJpaController bjc = new BookingJpaController();
            int accountId = AccountSession.getAccountId();
            
            int statusChooserIndex = statusChooser.getSelectedIndex();
            String status = statusChooser.getItemAt(statusChooserIndex);
            
            List<Object[]> bookings = bjc.getOwnerReservations(accountId, status);
            initPanels(bookings);
        }).start();
    }
    
    public void initPanels(List<Object[]> bookings)
    {
        DefaultTableModel model = (DefaultTableModel)reservations.getModel();
        model.setRowCount(0);
        
        reservations.setCellSelectionEnabled(false);
        reservations.setRowSelectionAllowed(true);
        
        if (!bookings.isEmpty()) {
            for(int i = 0; i < bookings.size(); i++) {
                Vector<Object> data = new Vector<>();
                DecimalFormat df = new DecimalFormat("#.00");
                String totalPrice = df.format(bookings.get(i)[2]) + " $";
                
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                String checkIn = dateFormat.format(bookings.get(i)[3]);
                String checkOut = dateFormat.format(bookings.get(i)[4]);
                
                data.add(bookings.get(i)[0]);
                data.add(bookings.get(i)[1]);
                data.add(totalPrice);
                
                data.add(checkIn);
                data.add(checkOut);
                data.add(bookings.get(i)[5]);
                
                model.addRow(data);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        statusChooser = new javax.swing.JComboBox<>();
        roomNumber = new javax.swing.JTextField();
        buildingName = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        reservations = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        accept = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        reject = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("My Reservations");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jButton1.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        jButton1.setText("<< All Buildings");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        statusChooser.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        statusChooser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "pending", "confirmed", "cancelled" }));

        jButton2.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        jButton2.setText("Search...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        reservations.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        reservations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Building name", "Room", "Total Price", "Check In", "CheckOut", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
        reservations.setRowHeight(80);
        reservations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        reservations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reservationsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(reservations);

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        accept.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        accept.setText("Accept");
        accept.setEnabled(false);
        accept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        jButton4.setText("Back...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        reject.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        reject.setText("Reject...");
        reject.setEnabled(false);
        reject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(accept)
                .addGap(18, 18, 18)
                .addComponent(reject)
                .addGap(22, 22, 22)
                .addComponent(jButton4)
                .addGap(56, 56, 56))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(accept)
                    .addComponent(reject))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(32, 32, 32)
                .addComponent(buildingName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(roomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(statusChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jButton2)
                .addGap(18, 18, 18))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(statusChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buildingName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new Building_Management().setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        new Building_Management().setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new Thread(() -> {
            int statusChooserIndex = statusChooser.getSelectedIndex();
            String status = statusChooser.getItemAt(statusChooserIndex);
            
            BookingJpaController bjc = new BookingJpaController();
            int accountId = AccountSession.getAccountId();
            
            List<Object[]> bookings = bjc.getOwnerReservations(accountId, status);
            List<BookingViewModel> list;
            try {
                list = GetFilteredResults(bookings);
                filterReservationResults(list);
            } catch (ParseException ex) {
                Logger.getLogger(MyReservations.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void reservationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reservationsMouseClicked
        DefaultTableModel model = (DefaultTableModel)reservations.getModel();
        int selectedIndex = reservations.getSelectedRow();
        
        accept.setEnabled(false);
        reject.setEnabled(false);
        
        if(selectedIndex >= 0) {
            if("pending".equals(model.getValueAt(selectedIndex, 5).toString())) {
                accept.setEnabled(true);
                reject.setEnabled(true);
            }
            else if("confirmed".equals(model.getValueAt(selectedIndex, 5).toString()))
                reject.setEnabled(true);
        }
    }//GEN-LAST:event_reservationsMouseClicked

    private void acceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptActionPerformed
        DefaultTableModel model = (DefaultTableModel)reservations.getModel();
        int selectedIndex = reservations.getSelectedRow();
        
        if(selectedIndex >= 0) {
            BookingJpaController bjc = new BookingJpaController();
            int roomId = Integer.parseInt(model.getValueAt(selectedIndex, 1).toString()); 
            int accountId = AccountSession.getAccountId();

            bjc.updateOwnerReservationByRoom(accountId, roomId, "confirmed");
            fillReservationList();
        }
    }//GEN-LAST:event_acceptActionPerformed

    private void rejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectActionPerformed
        DefaultTableModel model = (DefaultTableModel)reservations.getModel();
        int selectedIndex = reservations.getSelectedRow();
        
        if(selectedIndex >= 0) {
            BookingJpaController bjc = new BookingJpaController();
            RoomsJpaController rjc = new RoomsJpaController();
            
            int roomId = Integer.parseInt(model.getValueAt(selectedIndex, 1).toString()); 
            int accountId = AccountSession.getAccountId();

            bjc.updateOwnerReservationByRoom(accountId, roomId, "cancelled");
            rjc.ForceUpdateRoomStatus(roomId, "available");
            fillReservationList();
        }
    }//GEN-LAST:event_rejectActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
    }//GEN-LAST:event_formWindowClosing

    private List<BookingViewModel> Convert(List<Object[]> bookings) throws ParseException {
        List<BookingViewModel> results = new ArrayList<>();
        
        for(int k = 0; k < bookings.size(); k++) {
            BookingViewModel book = new BookingViewModel();
            book.setName(bookings.get(k)[0].toString());

            DecimalFormat df = new DecimalFormat("#.00");
            df.setParseBigDecimal(true);

            book.setTotalPrice((BigDecimal) df.parse(bookings.get(k)[2].toString()));
            book.setRoomId(Integer.parseInt(bookings.get(k)[1].toString()));
                
            book.setCheckIn(Timestamp.valueOf(bookings.get(k)[3].toString()));
            book.setCheckOut(Timestamp.valueOf(bookings.get(k)[4].toString()));
                
            book.setStatus(bookings.get(k)[5].toString());
            results.add(book);
        }
        
        return results;
    }
    
    private List<BookingViewModel> GetFilteredResults(List<Object[]> bookings) throws ParseException {
        List<BookingViewModel> results = new ArrayList<>();
        boolean[] lookup = new boolean[bookings.size()];
        for(int i = 0; i < lookup.length; i++) lookup[i] = true;
        
        boolean notEmptyBuildingName = !buildingName.getText().isEmpty();
        String builderName = buildingName.getText().toLowerCase();
        
        boolean notEmptyRoomNumber = !roomNumber.getText().isEmpty();
        int roomId = notEmptyRoomNumber ? Integer.parseInt(roomNumber.getText()) : 0;
        
        for(int j = 0; j < lookup.length; j++) {
            /* elimina toate rezervarile, ale caror nume de cladiri incep cu string-ul introdus */
            if(lookup[j] && notEmptyBuildingName && !bookings.get(j)[0].toString().toLowerCase().startsWith(builderName))
                lookup[j] = false;
            
            /* daca este specificata o anumita camera, sunt eliminate celelalte rezervari ce nu corespund acesteia */
            if(lookup[j] && notEmptyRoomNumber && !bookings.get(j)[1].toString().startsWith(roomNumber.getText()))
                lookup[j] = false;
        }
        
        for(int k = 0; k < lookup.length; k++) {
            if(lookup[k]) {
                BookingViewModel book = new BookingViewModel();
                book.setName(bookings.get(k)[0].toString());
                
                DecimalFormat df = new DecimalFormat("#.00");
                df.setParseBigDecimal(true);
                book.setTotalPrice((BigDecimal) df.parse(bookings.get(k)[2].toString()));
                book.setRoomId(Integer.parseInt(bookings.get(k)[1].toString()));
                
                book.setCheckIn(Timestamp.valueOf(bookings.get(k)[3].toString()));
                book.setCheckOut(Timestamp.valueOf(bookings.get(k)[4].toString()));
                
                book.setStatus(bookings.get(k)[5].toString());
                results.add(book);
            }
        }
        
        return results;
    }
    
    public void filterReservationResults(List<BookingViewModel> bookings)
    {
        DefaultTableModel model = (DefaultTableModel)reservations.getModel();
        model.setRowCount(0);
        
        reservations.setCellSelectionEnabled(false);
        reservations.setRowSelectionAllowed(true);
        
        if (!bookings.isEmpty()) {
            for(int i = 0; i < bookings.size(); i++) {
                Vector<Object> data = new Vector<>();
                DecimalFormat df = new DecimalFormat("#.00");
                String totalPrice = df.format(bookings.get(i).getTotalPrice()) + " $";
                
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                String checkIn = dateFormat.format(bookings.get(i).getCheckIn());
                String checkOut = dateFormat.format(bookings.get(i).getCheckOut());
                
                data.add(bookings.get(i).getName());
                data.add(bookings.get(i).getRoomId());
                data.add(totalPrice);
                
                data.add(checkIn);
                data.add(checkOut);
                data.add(bookings.get(i).getStatus());
                
                model.addRow(data);
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MyReservations().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accept;
    private javax.swing.JTextField buildingName;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reject;
    private javax.swing.JTable reservations;
    private javax.swing.JTextField roomNumber;
    private javax.swing.JComboBox<String> statusChooser;
    // End of variables declaration//GEN-END:variables
}
